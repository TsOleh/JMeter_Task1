<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="login" elementType="Argument">
            <stringProp name="Argument.name">login</stringProp>
            <stringProp name="Argument.value">TsOleh</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password" elementType="Argument">
            <stringProp name="Argument.name">password</stringProp>
            <stringProp name="Argument.value">ery46At4684</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">github.com/</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Git Hub" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Home page" enabled="true"/>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="661 /" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="661 /" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">github.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="659 /v3/links/ping-centre" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;locale&quot;:&quot;en-US&quot;,&quot;topic&quot;:&quot;firefox-onboarding-session2&quot;,&quot;client_id&quot;:&quot;19b344c7-8a47-434b-b03a-da63e13e7bcb&quot;,&quot;version&quot;:&quot;61.0.1&quot;,&quot;release_channel&quot;:&quot;release&quot;,&quot;addon_version&quot;:&quot;1.0&quot;,&quot;category&quot;:&quot;onboarding-interactions&quot;,&quot;page&quot;:&quot;about:newtab&quot;,&quot;parent_session_id&quot;:&quot;{760123d9-c038-4751-838c-b7f82bcf480a}&quot;,&quot;root_session_id&quot;:&quot;{760123d9-c038-4751-838c-b7f82bcf480a}&quot;,&quot;session_begin&quot;:1531085018165,&quot;session_end&quot;:1531085036427,&quot;session_id&quot;:&quot;{760123d9-c038-4751-838c-b7f82bcf480a}&quot;,&quot;tour_type&quot;:&quot;new&quot;,&quot;type&quot;:&quot;onboarding-session&quot;,&quot;profile_creation_date&quot;:17717,&quot;region&quot;:&quot;UA&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">tiles.services.mozilla.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v3/links/ping-centre</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="origin" elementType="Header">
                    <stringProp name="Header.name">origin</stringProp>
                    <stringProp name="Header.value">null</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="660 /v4/links/activity-stream" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;locale&quot;:&quot;en-US&quot;,&quot;topic&quot;:&quot;activity-stream&quot;,&quot;client_id&quot;:&quot;19b344c7-8a47-434b-b03a-da63e13e7bcb&quot;,&quot;version&quot;:&quot;61.0.1&quot;,&quot;release_channel&quot;:&quot;release&quot;,&quot;addon_version&quot;:&quot;2018.06.29.1026-fa231556&quot;,&quot;user_prefs&quot;:59,&quot;session_id&quot;:&quot;{583f6685-96b2-477c-bf99-7adf5e102363}&quot;,&quot;page&quot;:&quot;about:newtab&quot;,&quot;session_duration&quot;:18294,&quot;action&quot;:&quot;activity_stream_session&quot;,&quot;perf&quot;:{&quot;load_trigger_type&quot;:&quot;menu_plus_or_keyboard&quot;,&quot;is_preloaded&quot;:true,&quot;is_prerendered&quot;:true,&quot;topsites_icon_stats&quot;:{&quot;custom_screenshot&quot;:0,&quot;screenshot_with_icon&quot;:2,&quot;screenshot&quot;:1,&quot;tippytop&quot;:0,&quot;rich_icon&quot;:3,&quot;no_image&quot;:0},&quot;topsites_pinned&quot;:0,&quot;topsites_data_late_by_ms&quot;:29,&quot;highlights_data_late_by_ms&quot;:33,&quot;topsites_first_painted_ts&quot;:1531084424190,&quot;load_trigger_ts&quot;:1531085018139,&quot;visibility_event_rcvd_ts&quot;:1531085018139},&quot;profile_creation_date&quot;:17717,&quot;region&quot;:&quot;UA&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">tiles.services.mozilla.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/v4/links/activity-stream</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="origin" elementType="Header">
                    <stringProp name="Header.name">origin</stringProp>
                    <stringProp name="Header.value">null</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="662 /github/page_view" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="dimensions[page]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[page]</stringProp>
                    <stringProp name="Argument.value">https://github.com/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[title]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[title]</stringProp>
                    <stringProp name="Argument.value">The world’s leading software development platform · GitHub</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[referrer]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[referrer]</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[user_agent]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[user_agent]</stringProp>
                    <stringProp name="Argument.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[screen_resolution]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[screen_resolution]</stringProp>
                    <stringProp name="Argument.value">1920x1080</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[pixel_ratio]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[pixel_ratio]</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[browser_resolution]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[browser_resolution]</stringProp>
                    <stringProp name="Argument.value">958x964</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[tz_seconds]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[tz_seconds]</stringProp>
                    <stringProp name="Argument.value">10800</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[timestamp]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[timestamp]</stringProp>
                    <stringProp name="Argument.value">1531085037878</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[request_id]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[request_id]</stringProp>
                    <stringProp name="Argument.value">E3F4:41F6:5F74C59:B1726B2:5B4280EC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[region_edge]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[region_edge]</stringProp>
                    <stringProp name="Argument.value">iad</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[region_render]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[region_render]</stringProp>
                    <stringProp name="Argument.value">iad</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="measures[performance_timing]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">measures[performance_timing]</stringProp>
                    <stringProp name="Argument.value">1-5-5--1342-1340-1323-1023-5-5-1---0---5-998-6-0--</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[cid]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[cid]</stringProp>
                    <stringProp name="Argument.value">1584574128.1531075000</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/github/page_view</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="663 /collect" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=917641303&amp;t=pageview&amp;_s=1&amp;dl=https%3A%2F%2Fgithub.com%2F&amp;ul=en-us&amp;de=UTF-8&amp;dt=The%20world%E2%80%99s%20leading%20software%20development%20platform%20%C2%B7%20GitHub&amp;sd=24-bit&amp;sr=1920x1080&amp;vp=941x964&amp;je=0&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=20857829.1531075000&amp;tid=UA-3769691-2&amp;cd1=Logged%20Out&amp;z=654757615</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/collect</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="664 /_private/browser/stats" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;features&quot;:{&quot;beacon&quot;:true,&quot;classlist&quot;:true,&quot;classlistMultiArg&quot;:true,&quot;closest&quot;:true,&quot;customElements&quot;:false,&quot;customEvent&quot;:true,&quot;fetch&quot;:true,&quot;highResolutionTime&quot;:true,&quot;matchesSelector&quot;:true,&quot;promises&quot;:true,&quot;stringEndsWith&quot;:true,&quot;stringStartsWith&quot;:true,&quot;timezone&quot;:true,&quot;url&quot;:true,&quot;urlSearchParams&quot;:true,&quot;userTimingEntries&quot;:true,&quot;userTimingMark&quot;:true,&quot;weakmap&quot;:true},&quot;timestamp&quot;:1531085037815},{&quot;resourceTimings&quot;:[{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1041,&quot;domainLookupStart&quot;:1041,&quot;domainLookupEnd&quot;:1041,&quot;connectStart&quot;:1041,&quot;connectEnd&quot;:1041,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1041,&quot;responseStart&quot;:1045,&quot;responseEnd&quot;:1057,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:115325,&quot;decodedBodySize&quot;:115325,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-73f533b7cc08a9d040e601cfd38fa585.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1041,&quot;duration&quot;:16},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1041,&quot;domainLookupStart&quot;:1041,&quot;domainLookupEnd&quot;:1041,&quot;connectStart&quot;:1041,&quot;connectEnd&quot;:1041,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1041,&quot;responseStart&quot;:1045,&quot;responseEnd&quot;:1058,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:402908,&quot;decodedBodySize&quot;:402908,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-a0af81f6e0697399467d33305ee19db5.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1041,&quot;duration&quot;:17},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1041,&quot;domainLookupStart&quot;:1041,&quot;domainLookupEnd&quot;:1041,&quot;connectStart&quot;:1041,&quot;connectEnd&quot;:1041,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1041,&quot;responseStart&quot;:1045,&quot;responseEnd&quot;:1059,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:45849,&quot;decodedBodySize&quot;:45849,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/site-4139b251192ad0112098c9811ce21d37.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1041,&quot;duration&quot;:18},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1041,&quot;domainLookupStart&quot;:1041,&quot;domainLookupEnd&quot;:1041,&quot;connectStart&quot;:1041,&quot;connectEnd&quot;:1041,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1041,&quot;responseStart&quot;:1046,&quot;responseEnd&quot;:1059,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:413,&quot;decodedBodySize&quot;:413,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/search-shortcut-hint.svg&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1041,&quot;duration&quot;:18},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1041,&quot;domainLookupStart&quot;:1041,&quot;domainLookupEnd&quot;:1041,&quot;connectStart&quot;:1041,&quot;connectEnd&quot;:1041,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1041,&quot;responseStart&quot;:1046,&quot;responseEnd&quot;:1059,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:11721,&quot;decodedBodySize&quot;:11721,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/spinners/octocat-spinner-128.gif&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1041,&quot;duration&quot;:18},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1042,&quot;domainLookupStart&quot;:1042,&quot;domainLookupEnd&quot;:1042,&quot;connectStart&quot;:1042,&quot;connectEnd&quot;:1042,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1042,&quot;responseStart&quot;:1061,&quot;responseEnd&quot;:1064,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:16457,&quot;decodedBodySize&quot;:16457,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/tenyears/10.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1042,&quot;duration&quot;:22},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1042,&quot;domainLookupStart&quot;:1042,&quot;domainLookupEnd&quot;:1042,&quot;connectStart&quot;:1042,&quot;connectEnd&quot;:1042,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1042,&quot;responseStart&quot;:1061,&quot;responseEnd&quot;:1064,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:20922,&quot;decodedBodySize&quot;:20922,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/airbnb-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1042,&quot;duration&quot;:22},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1042,&quot;domainLookupStart&quot;:1042,&quot;domainLookupEnd&quot;:1042,&quot;connectStart&quot;:1042,&quot;connectEnd&quot;:1042,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1042,&quot;responseStart&quot;:1061,&quot;responseEnd&quot;:1064,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13020,&quot;decodedBodySize&quot;:13020,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/sap-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1042,&quot;duration&quot;:22},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1042,&quot;domainLookupStart&quot;:1042,&quot;domainLookupEnd&quot;:1042,&quot;connectStart&quot;:1042,&quot;connectEnd&quot;:1042,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1042,&quot;responseStart&quot;:1061,&quot;responseEnd&quot;:1064,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:8466,&quot;decodedBodySize&quot;:8466,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/ibm-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1042,&quot;duration&quot;:22},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1042,&quot;domainLookupStart&quot;:1042,&quot;domainLookupEnd&quot;:1042,&quot;connectStart&quot;:1042,&quot;connectEnd&quot;:1042,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1042,&quot;responseStart&quot;:1061,&quot;responseEnd&quot;:1064,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:7378,&quot;decodedBodySize&quot;:7378,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/google-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1042,&quot;duration&quot;:22},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1043,&quot;domainLookupStart&quot;:1043,&quot;domainLookupEnd&quot;:1043,&quot;connectStart&quot;:1043,&quot;connectEnd&quot;:1043,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1043,&quot;responseStart&quot;:1047,&quot;responseEnd&quot;:1059,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:20681,&quot;decodedBodySize&quot;:20681,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/swift-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1043,&quot;duration&quot;:16},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1043,&quot;domainLookupStart&quot;:1043,&quot;domainLookupEnd&quot;:1043,&quot;connectStart&quot;:1043,&quot;connectEnd&quot;:1043,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1043,&quot;responseStart&quot;:1061,&quot;responseEnd&quot;:1064,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:24740,&quot;decodedBodySize&quot;:24740,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/paypal-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1043,&quot;duration&quot;:21},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1043,&quot;domainLookupStart&quot;:1043,&quot;domainLookupEnd&quot;:1043,&quot;connectStart&quot;:1043,&quot;connectEnd&quot;:1043,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1043,&quot;responseStart&quot;:1061,&quot;responseEnd&quot;:1064,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:19335,&quot;decodedBodySize&quot;:19335,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/bloomberg-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1043,&quot;duration&quot;:21},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1043,&quot;domainLookupStart&quot;:1043,&quot;domainLookupEnd&quot;:1043,&quot;connectStart&quot;:1043,&quot;connectEnd&quot;:1043,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1043,&quot;responseStart&quot;:1061,&quot;responseEnd&quot;:1065,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:19454,&quot;decodedBodySize&quot;:19454,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/spotify-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1043,&quot;duration&quot;:22},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1043,&quot;domainLookupStart&quot;:1043,&quot;domainLookupEnd&quot;:1043,&quot;connectStart&quot;:1043,&quot;connectEnd&quot;:1043,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1043,&quot;responseStart&quot;:1061,&quot;responseEnd&quot;:1065,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:1472,&quot;decodedBodySize&quot;:1472,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/facebook-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1043,&quot;duration&quot;:22},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1044,&quot;domainLookupStart&quot;:1044,&quot;domainLookupEnd&quot;:1044,&quot;connectStart&quot;:1044,&quot;connectEnd&quot;:1044,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1044,&quot;responseStart&quot;:1047,&quot;responseEnd&quot;:1059,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:21236,&quot;decodedBodySize&quot;:21236,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/node-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1044,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1044,&quot;domainLookupStart&quot;:1044,&quot;domainLookupEnd&quot;:1044,&quot;connectStart&quot;:1044,&quot;connectEnd&quot;:1044,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1044,&quot;responseStart&quot;:1048,&quot;responseEnd&quot;:1059,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:17194,&quot;decodedBodySize&quot;:17194,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/nasa-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1044,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1044,&quot;domainLookupStart&quot;:1044,&quot;domainLookupEnd&quot;:1044,&quot;connectStart&quot;:1044,&quot;connectEnd&quot;:1044,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1044,&quot;responseStart&quot;:1048,&quot;responseEnd&quot;:1059,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:31505,&quot;decodedBodySize&quot;:31505,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/home-illo-team.svg&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1044,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1044,&quot;domainLookupStart&quot;:1044,&quot;domainLookupEnd&quot;:1044,&quot;connectStart&quot;:1044,&quot;connectEnd&quot;:1044,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1044,&quot;responseStart&quot;:1049,&quot;responseEnd&quot;:1059,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:3078,&quot;decodedBodySize&quot;:3078,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/home-illo-team-code.svg&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1044,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1044,&quot;domainLookupStart&quot;:1044,&quot;domainLookupEnd&quot;:1044,&quot;connectStart&quot;:1044,&quot;connectEnd&quot;:1044,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1044,&quot;responseStart&quot;:1049,&quot;responseEnd&quot;:1059,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:1887,&quot;decodedBodySize&quot;:1887,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/home-illo-team-chaos.svg&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1044,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1044,&quot;domainLookupStart&quot;:1044,&quot;domainLookupEnd&quot;:1044,&quot;connectStart&quot;:1044,&quot;connectEnd&quot;:1044,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1044,&quot;responseStart&quot;:1049,&quot;responseEnd&quot;:1059,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:1856,&quot;decodedBodySize&quot;:1856,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/home-illo-team-tools.svg&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1044,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1044,&quot;domainLookupStart&quot;:1044,&quot;domainLookupEnd&quot;:1044,&quot;connectStart&quot;:1044,&quot;connectEnd&quot;:1044,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1044,&quot;responseStart&quot;:1061,&quot;responseEnd&quot;:1065,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:19351,&quot;decodedBodySize&quot;:19351,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/logos/walmart-logo.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1044,&quot;duration&quot;:21},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1045,&quot;domainLookupStart&quot;:1045,&quot;domainLookupEnd&quot;:1045,&quot;connectStart&quot;:1045,&quot;connectEnd&quot;:1045,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1045,&quot;responseStart&quot;:1049,&quot;responseEnd&quot;:1059,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:167023,&quot;decodedBodySize&quot;:167023,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/home-illo-business.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1045,&quot;duration&quot;:14},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1045,&quot;domainLookupStart&quot;:1045,&quot;domainLookupEnd&quot;:1045,&quot;connectStart&quot;:1045,&quot;connectEnd&quot;:1045,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1045,&quot;responseStart&quot;:1050,&quot;responseEnd&quot;:1060,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:34463,&quot;decodedBodySize&quot;:34463,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/slackhq.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1045,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1046,&quot;domainLookupStart&quot;:1046,&quot;domainLookupEnd&quot;:1046,&quot;connectStart&quot;:1046,&quot;connectEnd&quot;:1046,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1046,&quot;responseStart&quot;:1050,&quot;responseEnd&quot;:1060,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:572,&quot;decodedBodySize&quot;:572,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/zenhubio.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1046,&quot;duration&quot;:14},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1046,&quot;domainLookupStart&quot;:1046,&quot;domainLookupEnd&quot;:1046,&quot;connectStart&quot;:1046,&quot;connectEnd&quot;:1046,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1046,&quot;responseStart&quot;:1051,&quot;responseEnd&quot;:1060,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:16630,&quot;decodedBodySize&quot;:16630,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/travis-ci.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1046,&quot;duration&quot;:14},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1046,&quot;domainLookupStart&quot;:1046,&quot;domainLookupEnd&quot;:1046,&quot;connectStart&quot;:1046,&quot;connectEnd&quot;:1046,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1046,&quot;responseStart&quot;:1051,&quot;responseEnd&quot;:1061,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:8973,&quot;decodedBodySize&quot;:8973,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/atom.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1046,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1047,&quot;domainLookupStart&quot;:1047,&quot;domainLookupEnd&quot;:1047,&quot;connectStart&quot;:1047,&quot;connectEnd&quot;:1047,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1047,&quot;responseStart&quot;:1051,&quot;responseEnd&quot;:1061,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:65515,&quot;decodedBodySize&quot;:65515,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/circleci.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1047,&quot;duration&quot;:14},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1047,&quot;domainLookupStart&quot;:1047,&quot;domainLookupEnd&quot;:1047,&quot;connectStart&quot;:1047,&quot;connectEnd&quot;:1047,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1047,&quot;responseStart&quot;:1051,&quot;responseEnd&quot;:1061,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:9384,&quot;decodedBodySize&quot;:9384,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/codeship.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1047,&quot;duration&quot;:14},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1047,&quot;domainLookupStart&quot;:1047,&quot;domainLookupEnd&quot;:1047,&quot;connectStart&quot;:1047,&quot;connectEnd&quot;:1047,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1047,&quot;responseStart&quot;:1056,&quot;responseEnd&quot;:1062,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:123956,&quot;decodedBodySize&quot;:123956,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/developers/freakboy3742.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1047,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1047,&quot;domainLookupStart&quot;:1047,&quot;domainLookupEnd&quot;:1047,&quot;connectStart&quot;:1047,&quot;connectEnd&quot;:1047,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1047,&quot;responseStart&quot;:1057,&quot;responseEnd&quot;:1062,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:378670,&quot;decodedBodySize&quot;:378670,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/customers/mailchimp.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1047,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1047,&quot;domainLookupStart&quot;:1047,&quot;domainLookupEnd&quot;:1047,&quot;connectStart&quot;:1047,&quot;connectEnd&quot;:1047,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1047,&quot;responseStart&quot;:1057,&quot;responseEnd&quot;:1062,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:28862,&quot;decodedBodySize&quot;:28862,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/developers/kris-nova.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1047,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1047,&quot;domainLookupStart&quot;:1047,&quot;domainLookupEnd&quot;:1047,&quot;connectStart&quot;:1047,&quot;connectEnd&quot;:1047,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1047,&quot;responseStart&quot;:1057,&quot;responseEnd&quot;:1063,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:34263,&quot;decodedBodySize&quot;:34263,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/developers/yyx990803.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1047,&quot;duration&quot;:16},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1047,&quot;domainLookupStart&quot;:1047,&quot;domainLookupEnd&quot;:1047,&quot;connectStart&quot;:1047,&quot;connectEnd&quot;:1047,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1047,&quot;responseStart&quot;:1061,&quot;responseEnd&quot;:1065,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:76617,&quot;decodedBodySize&quot;:76617,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/integrators/codeclimate.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1047,&quot;duration&quot;:18},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1047,&quot;domainLookupStart&quot;:1047,&quot;domainLookupEnd&quot;:1047,&quot;connectStart&quot;:1047,&quot;connectEnd&quot;:1047,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1047,&quot;responseStart&quot;:1063,&quot;responseEnd&quot;:1072,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:114744,&quot;decodedBodySize&quot;:114744,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/developers/ariya.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1047,&quot;duration&quot;:25},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1048,&quot;domainLookupStart&quot;:1048,&quot;domainLookupEnd&quot;:1048,&quot;connectStart&quot;:1048,&quot;connectEnd&quot;:1048,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1048,&quot;responseStart&quot;:1057,&quot;responseEnd&quot;:1063,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:331768,&quot;decodedBodySize&quot;:331768,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/customers/mapbox.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1048,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1048,&quot;domainLookupStart&quot;:1048,&quot;domainLookupEnd&quot;:1048,&quot;connectStart&quot;:1048,&quot;connectEnd&quot;:1048,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1048,&quot;responseStart&quot;:1057,&quot;responseEnd&quot;:1063,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13933,&quot;decodedBodySize&quot;:13933,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/site/stories/developers/jessfraz.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1048,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1049,&quot;domainLookupStart&quot;:1049,&quot;domainLookupEnd&quot;:1049,&quot;connectStart&quot;:1049,&quot;connectEnd&quot;:1049,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1049,&quot;responseStart&quot;:1058,&quot;responseEnd&quot;:1064,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:65606,&quot;decodedBodySize&quot;:65606,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/compat-a48960bafc17c30572990bbab3664e9c.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1049,&quot;duration&quot;:15},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1068,&quot;domainLookupStart&quot;:1068,&quot;domainLookupEnd&quot;:1068,&quot;connectStart&quot;:1068,&quot;connectEnd&quot;:1068,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1068,&quot;responseStart&quot;:1076,&quot;responseEnd&quot;:1082,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:263767,&quot;decodedBodySize&quot;:263767,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-0e160a25769bfa21becaa0594b0ad51b.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1068,&quot;duration&quot;:14},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1068,&quot;domainLookupStart&quot;:1068,&quot;domainLookupEnd&quot;:1068,&quot;connectStart&quot;:1068,&quot;connectEnd&quot;:1068,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1068,&quot;responseStart&quot;:1076,&quot;responseEnd&quot;:1084,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:475963,&quot;decodedBodySize&quot;:475963,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-26e14ae7d98ff585aeac5c83d82460da.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1068,&quot;duration&quot;:16},{&quot;initiatorType&quot;:&quot;other&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1185,&quot;domainLookupStart&quot;:1185,&quot;domainLookupEnd&quot;:1185,&quot;connectStart&quot;:1185,&quot;connectEnd&quot;:1185,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1185,&quot;responseStart&quot;:1186,&quot;responseEnd&quot;:1228,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13360,&quot;decodedBodySize&quot;:13360,&quot;name&quot;:&quot;https://assets-cdn.github.com/static/fonts/roboto/roboto-light.woff&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1185,&quot;duration&quot;:43},{&quot;initiatorType&quot;:&quot;other&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1188,&quot;domainLookupStart&quot;:1188,&quot;domainLookupEnd&quot;:1188,&quot;connectStart&quot;:1188,&quot;connectEnd&quot;:1188,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1188,&quot;responseStart&quot;:1188,&quot;responseEnd&quot;:1228,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13308,&quot;decodedBodySize&quot;:13308,&quot;name&quot;:&quot;https://assets-cdn.github.com/static/fonts/roboto/roboto-regular.woff&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1188,&quot;duration&quot;:40},{&quot;initiatorType&quot;:&quot;other&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1193,&quot;domainLookupStart&quot;:1193,&quot;domainLookupEnd&quot;:1193,&quot;connectStart&quot;:1193,&quot;connectEnd&quot;:1193,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:1193,&quot;responseStart&quot;:1194,&quot;responseEnd&quot;:1228,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:13248,&quot;decodedBodySize&quot;:13248,&quot;name&quot;:&quot;https://assets-cdn.github.com/static/fonts/roboto/roboto-medium.woff&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1193,&quot;duration&quot;:35},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1409,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2128,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[title]=The%20world%E2%80%99s%20leading%20software%20development%20platform%20%C2%B7%20GitHub&amp;dimensions[referrer]=&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A61.0)%20Gecko%2F20100101%20Firefox%2F61.0&amp;dimensions[screen_resolution]=1920x1080&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=958x964&amp;dimensions[tz_seconds]=10800&amp;dimensions[timestamp]=1531085037878&amp;dimensions[request_id]=E3F4%3A41F6%3A5F74C59%3AB1726B2%3A5B4280EC&amp;dimensions[region_edge]=iad&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-5-5--1342-1340-1323-1023-5-5-1---0---5-998-6-0--&amp;&amp;&amp;dimensions[cid]=1584574128.1531075000&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:1409,&quot;duration&quot;:719}],&quot;timestamp&quot;:1531085038610},{&quot;navigationTimings&quot;:[{&quot;unloadEventStart&quot;:0,&quot;unloadEventEnd&quot;:0,&quot;domInteractive&quot;:1324,&quot;domContentLoadedEventStart&quot;:1341,&quot;domContentLoadedEventEnd&quot;:1342,&quot;domComplete&quot;:2131,&quot;loadEventStart&quot;:2131,&quot;loadEventEnd&quot;:2134,&quot;type&quot;:&quot;navigate&quot;,&quot;redirectCount&quot;:0,&quot;initiatorType&quot;:&quot;navigation&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1,&quot;domainLookupStart&quot;:5,&quot;domainLookupEnd&quot;:5,&quot;connectStart&quot;:5,&quot;connectEnd&quot;:5,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:5,&quot;responseStart&quot;:6,&quot;responseEnd&quot;:998,&quot;transferSize&quot;:61544,&quot;encodedBodySize&quot;:59469,&quot;decodedBodySize&quot;:59469,&quot;name&quot;:&quot;document&quot;,&quot;entryType&quot;:&quot;navigation&quot;,&quot;startTime&quot;:0,&quot;duration&quot;:2134}],&quot;timestamp&quot;:1531085038611}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/_private/browser/stats</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://github.com</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Sign in page" enabled="true"/>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="665 /collect" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="665 /collect" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">v</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                    <stringProp name="Argument.value">j48</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="a" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">a</stringProp>
                    <stringProp name="Argument.value">917641303</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">event</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ni" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ni</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_s" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_s</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dl</stringProp>
                    <stringProp name="Argument.value">https://github.com/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ul" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ul</stringProp>
                    <stringProp name="Argument.value">en-us</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="de" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">de</stringProp>
                    <stringProp name="Argument.value">UTF-8</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dt" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dt</stringProp>
                    <stringProp name="Argument.value">The world’s leading software development platform · GitHub</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sd" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sd</stringProp>
                    <stringProp name="Argument.value">24-bit</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sr" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sr</stringProp>
                    <stringProp name="Argument.value">1920x1080</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="vp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">vp</stringProp>
                    <stringProp name="Argument.value">941x964</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="je" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">je</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ec" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">ec</stringProp>
                    <stringProp name="Argument.value">(Logged out) Header</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ea" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">ea</stringProp>
                    <stringProp name="Argument.value">clicked Sign in</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="el" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">el</stringProp>
                    <stringProp name="Argument.value">text:sign-in</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_u" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">_u</stringProp>
                    <stringProp name="Argument.value">SCCAAFABM~</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">jid</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cid</stringProp>
                    <stringProp name="Argument.value">20857829.1531075000</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tid</stringProp>
                    <stringProp name="Argument.value">UA-3769691-2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cd1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">cd1</stringProp>
                    <stringProp name="Argument.value">Logged Out</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="z" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">z</stringProp>
                    <stringProp name="Argument.value">1976013903</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/collect</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://github.com</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="666 /login" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">github.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/login</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="667 /collect" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=917641303&amp;t=event&amp;ni=0&amp;_s=2&amp;dl=https%3A%2F%2Fgithub.com%2F&amp;ul=en-us&amp;de=UTF-8&amp;dt=The%20world%E2%80%99s%20leading%20software%20development%20platform%20%C2%B7%20GitHub&amp;sd=24-bit&amp;sr=1920x1080&amp;vp=941x964&amp;je=0&amp;ec=(Logged%20out)%20Header&amp;ea=clicked%20Sign%20in&amp;el=text%3Asign-in&amp;_u=SCCAAFABM~&amp;jid=&amp;cid=20857829.1531075000&amp;tid=UA-3769691-2&amp;cd1=Logged%20Out&amp;z=1976013903</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/collect</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="668 /github/page_view" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="dimensions[page]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[page]</stringProp>
                    <stringProp name="Argument.value">https://github.com/login</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[title]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[title]</stringProp>
                    <stringProp name="Argument.value">Sign in to GitHub · GitHub</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[referrer]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[referrer]</stringProp>
                    <stringProp name="Argument.value">https://github.com/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[user_agent]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[user_agent]</stringProp>
                    <stringProp name="Argument.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[screen_resolution]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[screen_resolution]</stringProp>
                    <stringProp name="Argument.value">1920x1080</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[pixel_ratio]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[pixel_ratio]</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[browser_resolution]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[browser_resolution]</stringProp>
                    <stringProp name="Argument.value">1920x966</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[tz_seconds]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[tz_seconds]</stringProp>
                    <stringProp name="Argument.value">10800</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[timestamp]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[timestamp]</stringProp>
                    <stringProp name="Argument.value">1531085058928</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[request_id]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[request_id]</stringProp>
                    <stringProp name="Argument.value">E3AA:41F6:5F7589C:B173C74:5B428101</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[region_edge]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[region_edge]</stringProp>
                    <stringProp name="Argument.value">iad</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[region_render]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[region_render]</stringProp>
                    <stringProp name="Argument.value">iad</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="measures[performance_timing]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">measures[performance_timing]</stringProp>
                    <stringProp name="Argument.value">1-2-2--895-895-887-755-2-2-1---0---2-745-2-0-759-756</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dimensions[cid]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[cid]</stringProp>
                    <stringProp name="Argument.value">1584574128.1531075000</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/github/page_view</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="669 /collect" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=2111849125&amp;t=pageview&amp;_s=1&amp;dl=https%3A%2F%2Fgithub.com%2Flogin&amp;ul=en-us&amp;de=UTF-8&amp;dt=Sign%20in%20to%20GitHub%20%C2%B7%20GitHub&amp;sd=24-bit&amp;sr=1920x1080&amp;vp=1920x966&amp;je=0&amp;_u=SCCAAFABM~&amp;jid=&amp;cid=20857829.1531075000&amp;tid=UA-3769691-2&amp;cd1=Logged%20Out&amp;z=1147555079</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/collect</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="670 /_private/browser/stats" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;features&quot;:{&quot;beacon&quot;:true,&quot;classlist&quot;:true,&quot;classlistMultiArg&quot;:true,&quot;closest&quot;:true,&quot;customElements&quot;:false,&quot;customEvent&quot;:true,&quot;fetch&quot;:true,&quot;highResolutionTime&quot;:true,&quot;matchesSelector&quot;:true,&quot;promises&quot;:true,&quot;stringEndsWith&quot;:true,&quot;stringStartsWith&quot;:true,&quot;timezone&quot;:true,&quot;url&quot;:true,&quot;urlSearchParams&quot;:true,&quot;userTimingEntries&quot;:true,&quot;userTimingMark&quot;:true,&quot;weakmap&quot;:true},&quot;timestamp&quot;:1531085058894},{&quot;resourceTimings&quot;:[{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:773,&quot;domainLookupStart&quot;:773,&quot;domainLookupEnd&quot;:773,&quot;connectStart&quot;:773,&quot;connectEnd&quot;:773,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:773,&quot;responseStart&quot;:774,&quot;responseEnd&quot;:774,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:115325,&quot;decodedBodySize&quot;:115325,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-73f533b7cc08a9d040e601cfd38fa585.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:773,&quot;duration&quot;:1},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:775,&quot;domainLookupStart&quot;:775,&quot;domainLookupEnd&quot;:775,&quot;connectStart&quot;:775,&quot;connectEnd&quot;:775,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:775,&quot;responseStart&quot;:775,&quot;responseEnd&quot;:777,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:402908,&quot;decodedBodySize&quot;:402908,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-a0af81f6e0697399467d33305ee19db5.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:775,&quot;duration&quot;:2},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:775,&quot;domainLookupStart&quot;:775,&quot;domainLookupEnd&quot;:775,&quot;connectStart&quot;:775,&quot;connectEnd&quot;:775,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:775,&quot;responseStart&quot;:778,&quot;responseEnd&quot;:787,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:45849,&quot;decodedBodySize&quot;:45849,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/site-4139b251192ad0112098c9811ce21d37.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:775,&quot;duration&quot;:12},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:778,&quot;domainLookupStart&quot;:778,&quot;domainLookupEnd&quot;:778,&quot;connectStart&quot;:778,&quot;connectEnd&quot;:778,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:778,&quot;responseStart&quot;:779,&quot;responseEnd&quot;:787,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:65606,&quot;decodedBodySize&quot;:65606,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/compat-a48960bafc17c30572990bbab3664e9c.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:778,&quot;duration&quot;:9},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:779,&quot;domainLookupStart&quot;:779,&quot;domainLookupEnd&quot;:779,&quot;connectStart&quot;:779,&quot;connectEnd&quot;:779,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:779,&quot;responseStart&quot;:779,&quot;responseEnd&quot;:788,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:263767,&quot;decodedBodySize&quot;:263767,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-0e160a25769bfa21becaa0594b0ad51b.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:779,&quot;duration&quot;:9},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:779,&quot;domainLookupStart&quot;:779,&quot;domainLookupEnd&quot;:779,&quot;connectStart&quot;:779,&quot;connectEnd&quot;:779,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:779,&quot;responseStart&quot;:780,&quot;responseEnd&quot;:792,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:475963,&quot;decodedBodySize&quot;:475963,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-26e14ae7d98ff585aeac5c83d82460da.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:779,&quot;duration&quot;:13},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:932,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:1650,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2Flogin&amp;dimensions[title]=Sign%20in%20to%20GitHub%20%C2%B7%20GitHub&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A61.0)%20Gecko%2F20100101%20Firefox%2F61.0&amp;dimensions[screen_resolution]=1920x1080&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=1920x966&amp;dimensions[tz_seconds]=10800&amp;dimensions[timestamp]=1531085058928&amp;dimensions[request_id]=E3AA%3A41F6%3A5F7589C%3AB173C74%3A5B428101&amp;dimensions[region_edge]=iad&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-2-2--895-895-887-755-2-2-1---0---2-745-2-0-759-756&amp;&amp;&amp;dimensions[cid]=1584574128.1531075000&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:932,&quot;duration&quot;:718}],&quot;timestamp&quot;:1531085059656},{&quot;navigationTimings&quot;:[{&quot;unloadEventStart&quot;:756,&quot;unloadEventEnd&quot;:760,&quot;domInteractive&quot;:887,&quot;domContentLoadedEventStart&quot;:895,&quot;domContentLoadedEventEnd&quot;:896,&quot;domComplete&quot;:1653,&quot;loadEventStart&quot;:1653,&quot;loadEventEnd&quot;:1655,&quot;type&quot;:&quot;navigate&quot;,&quot;redirectCount&quot;:0,&quot;initiatorType&quot;:&quot;navigation&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:1,&quot;domainLookupStart&quot;:2,&quot;domainLookupEnd&quot;:2,&quot;connectStart&quot;:2,&quot;connectEnd&quot;:2,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2,&quot;responseStart&quot;:2,&quot;responseEnd&quot;:745,&quot;transferSize&quot;:15494,&quot;encodedBodySize&quot;:13265,&quot;decodedBodySize&quot;:13265,&quot;name&quot;:&quot;document&quot;,&quot;entryType&quot;:&quot;navigation&quot;,&quot;startTime&quot;:0,&quot;duration&quot;:1655}],&quot;timestamp&quot;:1531085059657}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/_private/browser/stats</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://github.com</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="My acount page" enabled="true"/>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="671 /session" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="671 /session" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="commit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">commit</stringProp>
                    <stringProp name="Argument.value">Sign+in</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="utf8" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">utf8</stringProp>
                    <stringProp name="Argument.value">%E2%9C%93</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="authenticity_token" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">authenticity_token</stringProp>
                    <stringProp name="Argument.value">rfffgQuocsE9E4g9gjcYJ%2Bv0v2IgECz950KrSapYqTbIYVRU4x%2FGCKaVuIaRN5kOqgwiTRxwFc8vhUzRZjCQ%2Fg%3D%3D</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="login" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">login</stringProp>
                    <stringProp name="Argument.value">${login}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="password" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">password</stringProp>
                    <stringProp name="Argument.value">${password}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">github.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/session</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/login</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="672 /" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">github.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/login</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="676 /github/page_view" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="dimensions[page]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[page]</stringProp>
                    <stringProp name="Argument.value">https://github.com/</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[title]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[title]</stringProp>
                    <stringProp name="Argument.value">GitHub</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[referrer]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[referrer]</stringProp>
                    <stringProp name="Argument.value">https://github.com/login</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[user_agent]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[user_agent]</stringProp>
                    <stringProp name="Argument.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[screen_resolution]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[screen_resolution]</stringProp>
                    <stringProp name="Argument.value">1920x1080</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[pixel_ratio]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[pixel_ratio]</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[browser_resolution]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[browser_resolution]</stringProp>
                    <stringProp name="Argument.value">958x964</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[tz_seconds]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[tz_seconds]</stringProp>
                    <stringProp name="Argument.value">10800</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[timestamp]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[timestamp]</stringProp>
                    <stringProp name="Argument.value">1531085096944</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[request_id]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[request_id]</stringProp>
                    <stringProp name="Argument.value">E500:41F6:5F76A5A:B175D00:5B428127</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[region_edge]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[region_edge]</stringProp>
                    <stringProp name="Argument.value">iad</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[region_render]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[region_render]</stringProp>
                    <stringProp name="Argument.value">iad</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="measures[performance_timing]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">measures[performance_timing]</stringProp>
                    <stringProp name="Argument.value">1-876-876--2153-2152-2147-1996-876-876-874---0-871-4-886-1991-887-0-1999-1997</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[actor_id]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[actor_id]</stringProp>
                    <stringProp name="Argument.value">37983665</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[actor_login]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[actor_login]</stringProp>
                    <stringProp name="Argument.value">${login}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[actor_hash]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[actor_hash]</stringProp>
                    <stringProp name="Argument.value">1b449b12c6d87ecfd8a1cdd5669280813b4799a3a7f960ad7d95d33a8ac104e9</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="dimensions[cid]" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dimensions[cid]</stringProp>
                    <stringProp name="Argument.value">1584574128.1531075000</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/github/page_view</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="674 /collect" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">v</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                    <stringProp name="Argument.value">j48</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="a" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">a</stringProp>
                    <stringProp name="Argument.value">904666950</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="t" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">t</stringProp>
                    <stringProp name="Argument.value">event</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ni" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ni</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_s" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">_s</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dl</stringProp>
                    <stringProp name="Argument.value">https://github.com/dashboard</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ul" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ul</stringProp>
                    <stringProp name="Argument.value">en-us</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="de" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">de</stringProp>
                    <stringProp name="Argument.value">UTF-8</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="dt" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">dt</stringProp>
                    <stringProp name="Argument.value">(masked)</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sd" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sd</stringProp>
                    <stringProp name="Argument.value">24-bit</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sr" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sr</stringProp>
                    <stringProp name="Argument.value">1920x1080</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="vp" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">vp</stringProp>
                    <stringProp name="Argument.value">958x947</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="je" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">je</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ec" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ec</stringProp>
                    <stringProp name="Argument.value">Dashboard</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ea" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">ea</stringProp>
                    <stringProp name="Argument.value">load broadcast</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="el" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">el</stringProp>
                    <stringProp name="Argument.value">Updated GitHub Privacy Statement and Terms of Service are in effect</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="_u" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">_u</stringProp>
                    <stringProp name="Argument.value">SCCAAEABM~</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="jid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">jid</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">cid</stringProp>
                    <stringProp name="Argument.value">20857829.1531075000</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tid</stringProp>
                    <stringProp name="Argument.value">UA-3769691-2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cd5" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">cd5</stringProp>
                    <stringProp name="Argument.value">Logged In</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="cd1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">cd1</stringProp>
                    <stringProp name="Argument.value">Logged In</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="z" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">z</stringProp>
                    <stringProp name="Argument.value">154158962</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">collector.githubapp.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/collect</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://github.com</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="673 /dashboard/recent-activity" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">github.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/dashboard/recent-activity</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="origin" elementType="Header">
                    <stringProp name="Header.name">origin</stringProp>
                    <stringProp name="Header.value">https://github.com</stringProp>
                  </elementProp>
                  <elementProp name="x-requested-with" elementType="Header">
                    <stringProp name="Header.name">x-requested-with</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="678 /collect" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=904666950&amp;t=pageview&amp;_s=2&amp;dl=https%3A%2F%2Fgithub.com%2Fdashboard&amp;ul=en-us&amp;de=UTF-8&amp;dt=(masked)&amp;sd=24-bit&amp;sr=1920x1080&amp;vp=958x947&amp;je=0&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=20857829.1531075000&amp;tid=UA-3769691-2&amp;cd5=Logged%20In&amp;cd1=Logged%20In&amp;z=717348793</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/collect</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="677 /collect" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">v=1&amp;_v=j48&amp;a=904666950&amp;t=event&amp;ni=1&amp;_s=1&amp;dl=https%3A%2F%2Fgithub.com%2Fdashboard&amp;ul=en-us&amp;de=UTF-8&amp;dt=(masked)&amp;sd=24-bit&amp;sr=1920x1080&amp;vp=958x947&amp;je=0&amp;ec=Dashboard&amp;ea=load%20broadcast&amp;el=Updated%20GitHub%20Privacy%20Statement%20and%20Terms%20of%20Service%20are%20in%20effect&amp;_u=SCCAAEABM~&amp;jid=&amp;cid=20857829.1531075000&amp;tid=UA-3769691-2&amp;cd5=Logged%20In&amp;cd1=Logged%20In&amp;z=154158962</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">www.google-analytics.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/collect</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="679 /_private/browser/stats" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;stats&quot;:[{&quot;features&quot;:{&quot;beacon&quot;:true,&quot;classlist&quot;:true,&quot;classlistMultiArg&quot;:true,&quot;closest&quot;:true,&quot;customElements&quot;:false,&quot;customEvent&quot;:true,&quot;fetch&quot;:true,&quot;highResolutionTime&quot;:true,&quot;matchesSelector&quot;:true,&quot;promises&quot;:true,&quot;stringEndsWith&quot;:true,&quot;stringStartsWith&quot;:true,&quot;timezone&quot;:true,&quot;url&quot;:true,&quot;urlSearchParams&quot;:true,&quot;userTimingEntries&quot;:true,&quot;userTimingMark&quot;:true,&quot;weakmap&quot;:true},&quot;timestamp&quot;:1531085096895},{&quot;resourceTimings&quot;:[{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2004,&quot;domainLookupStart&quot;:2004,&quot;domainLookupEnd&quot;:2004,&quot;connectStart&quot;:2004,&quot;connectEnd&quot;:2004,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2004,&quot;responseStart&quot;:2017,&quot;responseEnd&quot;:2021,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:115325,&quot;decodedBodySize&quot;:115325,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-73f533b7cc08a9d040e601cfd38fa585.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2004,&quot;duration&quot;:17},{&quot;initiatorType&quot;:&quot;link&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2004,&quot;domainLookupStart&quot;:2004,&quot;domainLookupEnd&quot;:2004,&quot;connectStart&quot;:2004,&quot;connectEnd&quot;:2004,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2004,&quot;responseStart&quot;:2019,&quot;responseEnd&quot;:2023,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:402908,&quot;decodedBodySize&quot;:402908,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-a0af81f6e0697399467d33305ee19db5.css&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2004,&quot;duration&quot;:19},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2004,&quot;domainLookupStart&quot;:2004,&quot;domainLookupEnd&quot;:2004,&quot;connectStart&quot;:2004,&quot;connectEnd&quot;:2004,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2004,&quot;responseStart&quot;:2023,&quot;responseEnd&quot;:2032,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:6423,&quot;decodedBodySize&quot;:6423,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/modules/notices/context_button.png&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2004,&quot;duration&quot;:28},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2004,&quot;domainLookupStart&quot;:2004,&quot;domainLookupEnd&quot;:2004,&quot;connectStart&quot;:2004,&quot;connectEnd&quot;:2004,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2004,&quot;responseStart&quot;:2032,&quot;responseEnd&quot;:2035,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:7957,&quot;decodedBodySize&quot;:7957,&quot;name&quot;:&quot;https://assets-cdn.github.com/images/spinners/octocat-spinner-64.gif&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2004,&quot;duration&quot;:31},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2004,&quot;domainLookupStart&quot;:2004,&quot;domainLookupEnd&quot;:2004,&quot;connectStart&quot;:2004,&quot;connectEnd&quot;:2004,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2004,&quot;responseStart&quot;:2034,&quot;responseEnd&quot;:2035,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:1571,&quot;decodedBodySize&quot;:1571,&quot;name&quot;:&quot;https://avatars0.githubusercontent.com/u/37983665?s=40&amp;v=4&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2004,&quot;duration&quot;:31},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2004,&quot;domainLookupStart&quot;:2004,&quot;domainLookupEnd&quot;:2004,&quot;connectStart&quot;:2004,&quot;connectEnd&quot;:2004,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2004,&quot;responseStart&quot;:2034,&quot;responseEnd&quot;:2035,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:1541,&quot;decodedBodySize&quot;:1541,&quot;name&quot;:&quot;https://avatars1.githubusercontent.com/u/39275713?s=40&amp;v=4&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2004,&quot;duration&quot;:31},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2005,&quot;domainLookupStart&quot;:2005,&quot;domainLookupEnd&quot;:2005,&quot;connectStart&quot;:2005,&quot;connectEnd&quot;:2005,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2005,&quot;responseStart&quot;:2020,&quot;responseEnd&quot;:2023,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:65606,&quot;decodedBodySize&quot;:65606,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/compat-a48960bafc17c30572990bbab3664e9c.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2005,&quot;duration&quot;:18},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2005,&quot;domainLookupStart&quot;:2005,&quot;domainLookupEnd&quot;:2005,&quot;connectStart&quot;:2005,&quot;connectEnd&quot;:2005,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2005,&quot;responseStart&quot;:2020,&quot;responseEnd&quot;:2024,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:263767,&quot;decodedBodySize&quot;:263767,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/frameworks-0e160a25769bfa21becaa0594b0ad51b.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2005,&quot;duration&quot;:19},{&quot;initiatorType&quot;:&quot;script&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2013,&quot;domainLookupStart&quot;:2013,&quot;domainLookupEnd&quot;:2013,&quot;connectStart&quot;:2013,&quot;connectEnd&quot;:2013,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2013,&quot;responseStart&quot;:2021,&quot;responseEnd&quot;:2043,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:475963,&quot;decodedBodySize&quot;:475963,&quot;name&quot;:&quot;https://assets-cdn.github.com/assets/github-26e14ae7d98ff585aeac5c83d82460da.js&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2013,&quot;duration&quot;:30},{&quot;initiatorType&quot;:&quot;fetch&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2163,&quot;domainLookupStart&quot;:2164,&quot;domainLookupEnd&quot;:2164,&quot;connectStart&quot;:2164,&quot;connectEnd&quot;:2164,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:2164,&quot;responseStart&quot;:2164,&quot;responseEnd&quot;:2993,&quot;transferSize&quot;:2593,&quot;encodedBodySize&quot;:1,&quot;decodedBodySize&quot;:1,&quot;name&quot;:&quot;https://github.com/dashboard/recent-activity&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2163,&quot;duration&quot;:830},{&quot;initiatorType&quot;:&quot;other&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2196,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2930,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/collect&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2196,&quot;duration&quot;:734},{&quot;initiatorType&quot;:&quot;img&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:0,&quot;redirectEnd&quot;:0,&quot;fetchStart&quot;:2204,&quot;domainLookupStart&quot;:0,&quot;domainLookupEnd&quot;:0,&quot;connectStart&quot;:0,&quot;connectEnd&quot;:0,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:0,&quot;responseStart&quot;:0,&quot;responseEnd&quot;:2910,&quot;transferSize&quot;:0,&quot;encodedBodySize&quot;:0,&quot;decodedBodySize&quot;:0,&quot;name&quot;:&quot;https://collector.githubapp.com/github/page_view?dimensions[page]=https%3A%2F%2Fgithub.com%2F&amp;dimensions[title]=GitHub&amp;dimensions[referrer]=https%3A%2F%2Fgithub.com%2Flogin&amp;dimensions[user_agent]=Mozilla%2F5.0%20(Windows%20NT%2010.0%3B%20Win64%3B%20x64%3B%20rv%3A61.0)%20Gecko%2F20100101%20Firefox%2F61.0&amp;dimensions[screen_resolution]=1920x1080&amp;dimensions[pixel_ratio]=1&amp;dimensions[browser_resolution]=958x964&amp;dimensions[tz_seconds]=10800&amp;dimensions[timestamp]=1531085096944&amp;dimensions[request_id]=E500%3A41F6%3A5F76A5A%3AB175D00%3A5B428127&amp;dimensions[region_edge]=iad&amp;dimensions[region_render]=iad&amp;&amp;measures[performance_timing]=1-876-876--2153-2152-2147-1996-876-876-874---0-871-4-886-1991-887-0-1999-1997&amp;&amp;dimensions[actor_id]=37983665&amp;dimensions[actor_login]=${login}&amp;dimensions[actor_hash]=1b449b12c6d87ecfd8a1cdd5669280813b4799a3a7f960ad7d95d33a8ac104e9&amp;dimensions[cid]=1584574128.1531075000&quot;,&quot;entryType&quot;:&quot;resource&quot;,&quot;startTime&quot;:2204,&quot;duration&quot;:706}],&quot;timestamp&quot;:1531085097750},{&quot;navigationTimings&quot;:[{&quot;unloadEventStart&quot;:1997,&quot;unloadEventEnd&quot;:1999,&quot;domInteractive&quot;:2148,&quot;domContentLoadedEventStart&quot;:2153,&quot;domContentLoadedEventEnd&quot;:2154,&quot;domComplete&quot;:3002,&quot;loadEventStart&quot;:3002,&quot;loadEventEnd&quot;:3004,&quot;type&quot;:&quot;navigate&quot;,&quot;redirectCount&quot;:1,&quot;initiatorType&quot;:&quot;navigation&quot;,&quot;nextHopProtocol&quot;:&quot;http/1.1&quot;,&quot;workerStart&quot;:0,&quot;redirectStart&quot;:4,&quot;redirectEnd&quot;:871,&quot;fetchStart&quot;:874,&quot;domainLookupStart&quot;:876,&quot;domainLookupEnd&quot;:876,&quot;connectStart&quot;:876,&quot;connectEnd&quot;:876,&quot;secureConnectionStart&quot;:0,&quot;requestStart&quot;:887,&quot;responseStart&quot;:887,&quot;responseEnd&quot;:1991,&quot;transferSize&quot;:53588,&quot;encodedBodySize&quot;:51051,&quot;decodedBodySize&quot;:51051,&quot;name&quot;:&quot;document&quot;,&quot;entryType&quot;:&quot;navigation&quot;,&quot;startTime&quot;:0,&quot;duration&quot;:3004}],&quot;timestamp&quot;:1531085097751}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">api.github.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/_private/browser/stats</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://github.com/</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">https://github.com</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="true">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="305776760">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)[\?;].*</stringProp>
          <stringProp name="1179605444">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)</stringProp>
          <stringProp name="1799639941">.*detectportal.firefox.com.*</stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">4</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">true</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">0</intProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
      </ProxyControl>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">recording.xml</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
